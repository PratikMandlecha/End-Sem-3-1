import cPickle, base64
try:
	from SimpleSession.versions.v65 import beginRestore,\
	    registerAfterModelsCB, reportRestoreError, checkVersion
except ImportError:
	from chimera import UserError
	raise UserError('Cannot open session that was saved in a'
	    ' newer version of Chimera; update your version')
checkVersion([1, 11, 2, 41380])
import chimera
from chimera import replyobj
replyobj.status('Restoring session...', \
    blankAfter=0)
replyobj.status('Beginning session restore...', \
    blankAfter=0, secondary=True)
beginRestore()

def restoreCoreModels():
	from SimpleSession.versions.v65 import init, restoreViewer, \
	     restoreMolecules, restoreColors, restoreSurfaces, \
	     restoreVRML, restorePseudoBondGroups, restoreModelAssociations
	molInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVRFyaWJib25JbnNpZGVDb2xvcnECSwFOfYdVCWJhbGxTY2FsZXEDSwFHP9AAAAAAAAB9h1UJcG9pbnRTaXplcQRLAUc/8AAAAAAAAH2HVQVjb2xvcnEFSwFLAH2HVQpyaWJib25UeXBlcQZLAUsAfYdVCnN0aWNrU2NhbGVxB0sBRz/wAAAAAAAAfYdVDG1tQ0lGSGVhZGVyc3EIXXEJTmFVDGFyb21hdGljTW9kZXEKSwFLAX2HVQp2ZHdEZW5zaXR5cQtLAUdAFAAAAAAAAH2HVQZoaWRkZW5xDEsBiX2HVQ1hcm9tYXRpY0NvbG9ycQ1LAU59h1UPcmliYm9uU21vb3RoaW5ncQ5LAUsAfYdVCWF1dG9jaGFpbnEPSwGIfYdVCnBkYlZlcnNpb25xEEsBSwF9h1UIb3B0aW9uYWxxEX1xElUIb3BlbmVkQXNxE4iJSwEoVQ1aRE5BXzRfYnAucGRicRROTksBdHEVfYeHc1UPbG93ZXJDYXNlQ2hhaW5zcRZLAYl9h1UJbGluZVdpZHRocRdLAUc/8AAAAAAAAH2HVQ9yZXNpZHVlTGFiZWxQb3NxGEsBSwB9h1UEbmFtZXEZSwFYDQAAAFpETkFfNF9icC5wZGJ9h1UPYXJvbWF0aWNEaXNwbGF5cRpLAYl9h1UPcmliYm9uU3RpZmZuZXNzcRtLAUc/6ZmZmZmZmn2HVQpwZGJIZWFkZXJzcRxdcR19cR5hVQNpZHNxH0sBSwBLAIZ9h1UOc3VyZmFjZU9wYWNpdHlxIEsBR7/wAAAAAAAAfYdVEGFyb21hdGljTGluZVR5cGVxIUsBSwJ9h1UUcmliYm9uSGlkZXNNYWluY2hhaW5xIksBiH2HVQdkaXNwbGF5cSNLAYh9h3Uu'))
	resInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQZpbnNlcnRxAksLVQEgfYdVC2ZpbGxEaXNwbGF5cQNLC4h9h1UEbmFtZXEESwtYAQAAAEN9cQVYAQAAAEddcQYoSwFLA0sGSwhLCmVzh1UFY2hhaW5xB0sLWAEAAABCfXEIWAEAAABBTl1xCUsASwWGcQphhnOHVQ5yaWJib25EcmF3TW9kZXELSwtLAn2HVQJzc3EMSwuJiYZ9h1UIbW9sZWN1bGVxDUsLSwB9h1ULcmliYm9uQ29sb3JxDksLSwF9cQ9LAk5dcRAoSwFLAYZxEUsDSwGGcRJLBksBhnETSwhLAYZxFEsKSwGGcRVlhnOHVQVsYWJlbHEWSwtYAAAAAH2HVQpsYWJlbENvbG9ycRdLC0sBfXEYSwJOXXEZKEsBSwGGcRpLA0sBhnEbSwZLAYZxHEsISwGGcR1LCksBhnEeZYZzh1UIZmlsbE1vZGVxH0sLSwF9h1UFaXNIZXRxIEsLiX2HVQtsYWJlbE9mZnNldHEhSwtOfYdVCHBvc2l0aW9ucSJdcSMoSwFLBYZxJEsHSwaGcSVlVQ1yaWJib25EaXNwbGF5cSZLC4l9h1UIb3B0aW9uYWxxJ31VBHNzSWRxKEsLSv////99h3Uu'))
	atomInfo = cPickle.loads(base64.b64decode('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'))
	bondInfo = cPickle.loads(base64.b64decode('gAJ9cQEoVQVjb2xvcnECTXIBSwF9cQMoSwJdcQQoSx9LIEshSyJLI0skSyVLJksnSyhLKUsqSytLLEstSy5LL0swSzFLMkszSzRLNUs2SzdLOEs5SzpLO0s8Sz1LPks/S0BLQUtjS2RLZUtmS2dLaEtpS2pLa0tsS21LbktvS3BLcUtyS3NLdEt1S3ZLd0t4S3lLekt7S3xLfUt+S39LgEuBS4JLg0uES4VLxkvHS8hLyUvKS8tLzEvNS85Lz0vQS9FL0kvTS9RL1UvWS9dL2EvZS9pL20vcS91L3kvfS+BL4UviS+NL5EvlS+ZL50voTQoBTQsBTQwBTQ0BTQ4BTQ8BTRABTREBTRIBTRMBTRQBTRUBTRYBTRcBTRgBTRkBTRoBTRsBTRwBTR0BTR4BTR8BTSABTSEBTSIBTSMBTSQBTSUBTSYBTScBTSgBTSkBTSoBTSsBTSwBTU4BTU8BTVABTVEBTVIBTVMBTVQBTVUBTVYBTVcBTVgBTVkBTVoBTVsBTVwBTV0BTV4BTV8BTWABTWEBTWIBTWMBTWQBTWUBTWYBTWcBTWgBTWkBTWoBTWsBTWwBTW0BTW4BTW8BTXABZU5dcQUoS0JLYkuGS6ZL6U0JAU0tAU1NAU1xAWV1h1UFYXRvbXNxBl1xByhdcQgoSwxLD2VdcQkoSw9LEGVdcQooSxBLEWVdcQsoSxFLE2VdcQwoSxFLEmVdcQ0oSxJLFmVdcQ4oSxNLFWVdcQ8oSxNLFGVdcRAoSxVLFmVdcREoSxZLF2VdcRIoSxdLGGVdcRMoSxdLHmVdcRQoSxhLGmVdcRUoSxhLGWVdcRYoSxpLG2VdcRcoSxtLHWVdcRgoSxtLHGVdcRkoSx1LHmVdcRooSx5LIWVdcRsoSw1LDGVdcRwoSw5LDGVdcR0oSx9LEGVdcR4oSyBLEGVdcR8oSyJLE2VdcSAoSyNLFWVdcSEoSyRLFWVdcSIoSyVLFmVdcSMoSyZLHGVdcSQoSydLHGVdcSUoSyhLHWVdcSYoSylLHmVdcScoSypLLWVdcSgoSy1LLmVdcSkoSy5LL2VdcSooSy9LMWVdcSsoSy9LMGVdcSwoSzBLNGVdcS0oSzFLMmVdcS4oSzFLM2VdcS8oSzNLNGVdcTAoSzRLNWVdcTEoSzVLNmVdcTIoSzVLP2VdcTMoSzZLN2VdcTQoSzZLQ2VdcTUoSzdLOGVdcTYoSzhLP2VdcTcoSzhLOWVdcTgoSzlLOmVdcTkoSzlLO2VdcTooSztLPGVdcTsoSzxLPmVdcTwoSzxLPWVdcT0oSz5LP2VdcT4oSytLKmVdcT8oSyxLKmVdcUAoS0BLLmVdcUEoS0FLLmVdcUIoS0JLL2VdcUMoS0RLM2VdcUQoS0VLM2VdcUUoS0ZLNGVdcUYoS0dLNmVdcUcoS0hLO2VdcUgoS0lLPWVdcUkoS0pLPWVdcUooSypLFGVdcUsoS0tLTmVdcUwoS05LT2VdcU0oS09LUGVdcU4oS1BLUWVdcU8oS1BLUmVdcVAoS1FLVWVdcVEoS1JLVGVdcVIoS1JLU2VdcVMoS1RLVWVdcVQoS1VLVmVdcVUoS1ZLV2VdcVYoS1ZLXWVdcVcoS1dLWGVdcVgoS1dLWWVdcVkoS1lLWmVdcVooS1pLXGVdcVsoS1pLW2VdcVwoS1xLXWVdcV0oS11LYGVdcV4oS0xLS2VdcV8oS01LS2VdcWAoS15LT2VdcWEoS19LT2VdcWIoS2FLUmVdcWMoS2JLVGVdcWQoS2NLVGVdcWUoS2RLVWVdcWYoS2VLW2VdcWcoS2ZLW2VdcWgoS2dLXGVdcWkoS2hLXWVdcWooSzJLS2VdcWsoS2lLbGVdcWwoS2xLbWVdcW0oS21LbmVdcW4oS25LcGVdcW8oS25Lb2VdcXAoS29Lc2VdcXEoS3BLcWVdcXIoS3BLcmVdcXMoS3JLc2VdcXQoS3NLdGVdcXUoS3RLdWVdcXYoS3RLfmVdcXcoS3VLdmVdcXgoS3VLgmVdcXkoS3ZLd2VdcXooS3dLfmVdcXsoS3dLeGVdcXwoS3hLeWVdcX0oS3hLemVdcX4oS3pLe2VdcX8oS3tLfWVdcYAoS3tLfGVdcYEoS31LfmVdcYIoS2pLaWVdcYMoS2tLaWVdcYQoS39LbWVdcYUoS4BLbWVdcYYoS4FLbmVdcYcoS4NLcmVdcYgoS4RLcmVdcYkoS4VLc2VdcYooS4ZLdWVdcYsoS4dLemVdcYwoS4hLfGVdcY0oS4lLfGVdcY4oS1NLaWVdcY8oS41LjmVdcZAoS45Lj2VdcZEoS49LkWVdcZIoS49LkGVdcZMoS5BLlGVdcZQoS5FLk2VdcZUoS5FLkmVdcZYoS5NLlGVdcZcoS5RLlWVdcZgoS5VLnGVdcZkoS5VLlmVdcZooS5ZLl2VdcZsoS5ZLmGVdcZwoS5hLmWVdcZ0oS5lLm2VdcZ4oS5lLmmVdcZ8oS5tLnGVdcaAoS5xLn2VdcaEoS4pLi2VdcaIoS4pLjGVdcaMoS4pLjWVdcaQoS51LjmVdcaUoS55LjmVdcaYoS6BLkWVdcacoS6FLk2VdcagoS6JLk2VdcakoS6NLlGVdcaooS6RLmmVdcasoS6VLmmVdcawoS6ZLm2Vdca0oS6dLnGVdca4oS3FLimVdca8oS6hLq2VdcbAoS6tLrGVdcbEoS6xLrWVdcbIoS61Lr2VdcbMoS61LrmVdcbQoS65LsmVdcbUoS69LsWVdcbYoS69LsGVdcbcoS7FLsmVdcbgoS7JLs2VdcbkoS7NLtGVdcbooS7NLumVdcbsoS7RLtmVdcbwoS7RLtWVdcb0oS7ZLt2Vdcb4oS7dLuWVdcb8oS7dLuGVdccAoS7lLumVdccEoS7pLvWVdccIoS6lLqGVdccMoS6pLqGVdccQoS7tLrGVdccUoS7xLrGVdccYoS75Lr2VdcccoS79LsWVdccgoS8BLsWVdcckoS8FLsmVdccooS8JLuGVdccsoS8NLuGVdccwoS8RLuWVdcc0oS8VLumVdcc4oS8ZLyWVdcc8oS8lLymVdcdAoS8pLy2VdcdEoS8tLzWVdcdIoS8tLzGVdcdMoS8xL0GVdcdQoS81LzmVdcdUoS81Lz2VdcdYoS89L0GVdcdcoS9BL0WVdcdgoS9FL0mVdcdkoS9FL22VdcdooS9JL02VdcdsoS9JL32VdcdwoS9NL1GVdcd0oS9RL22Vdcd4oS9RL1WVdcd8oS9VL1mVdceAoS9VL12VdceEoS9dL2GVdceIoS9hL2mVdceMoS9hL2WVdceQoS9pL22VdceUoS8dLxmVdceYoS8hLxmVdcecoS9xLymVdcegoS91LymVdcekoS95Ly2VdceooS+BLz2VdcesoS+FLz2VdcewoS+JL0GVdce0oS+NL0mVdce4oS+RL12Vdce8oS+VL2WVdcfAoS+ZL2WVdcfEoS8ZLsGVdcfIoS+dL6mVdcfMoS+pL62VdcfQoS+tL7GVdcfUoS+xL7WVdcfYoS+xL7mVdcfcoS+1L8WVdcfgoS+5L8GVdcfkoS+5L72VdcfooS/BL8WVdcfsoS/FL8mVdcfwoS/JL82Vd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'))
	crdInfo = cPickle.loads(base64.b64decode('gAJ9cQFLAH1xAihLAF1xAyhHQBnCj1wo9cNHQBMKPXCj1wpHwAEeuFHrhR+HcQRHQBa4UeuFHrhHQBauFHrhR65Hv/T1wo9cKPaHcQVHQB+ZmZmZmZpHQBJ64UeuFHtHv/64UeuFHriHcQZHQBcKPXCj1wpHQAp64UeuFHtHwABR64UeuFKHcQdHQBkzMzMzMzNHQALMzMzMzM1Hv/I9cKPXCj2HcQhHQBUUeuFHrhRHP/Qo9cKPXClHv+1wo9cKPXGHcQlHQBAUeuFHrhRHP/2ZmZmZmZpHv+BR64UeuFKHcQpHQBPCj1wo9cNHP9hR64UeuFJHwAFHrhR64UiHcQtHQBKPXCj1wo9Hv+4UeuFHrhRHv/wAAAAAAACHcQxHQA2FHrhR64VHP/Cj1wo9cKRHwAYAAAAAAACHcQ1HQAfXCj1wo9dHP/a4UeuFHrhHv/aPXCj1wo+HcQ5HQAA9cKPXCj1HQARmZmZmZmZHv/fXCj1wo9eHcQ9HP+YUeuFHrhRHQAHXCj1wo9dHv/q4UeuFHriHcRBHP9PXCj1wo9dHP/EeuFHrhR9Hv/wo9cKPXCmHcRFHv8wo9cKPXClHQAoUeuFHrhRHv/wAAAAAAACHcRJHP8hR64UeuFJHQBI9cKPXCj1Hv/pmZmZmZmaHcRNHv+euFHrhR65HQBYKPXCj1wpHv/uuFHrhR66HcRRHP/lwo9cKPXFHQBOFHrhR64VHv/eFHrhR64WHcRVHQAOFHrhR64VHQA71wo9cKPZHv/Y9cKPXCj2HcRZHQBoUeuFHrhRHQAZ64UeuFHtHv9HrhR64UeyHcRdHQByFHrhR64VHP/+FHrhR64VHv/jMzMzMzM2HcRhHQBaZmZmZmZpHP+YUeuFHrhRHv8hR64UeuFKHcRlHQBa4UeuFHrhHP9AAAAAAAABHwAaPXCj1wo+HcRpHQA9cKPXCj1xHP/2ZmZmZmZpHwApmZmZmZmaHcRtHQAlHrhR64UhHP9mZmZmZmZpHwApmZmZmZmaHcRxHQAOZmZmZmZpHP+R64UeuFHtHv/FHrhR64UiHcR1Hv+a4UeuFHrhHQBnCj1wo9cNHv/sKPXCj1wqHcR5Hv/eFHrhR64VHQBUzMzMzMzNHv/1HrhR64UiHcR9HP/5mZmZmZmZHQBdHrhR64UhHv/Y9cKPXCj2HcSBHQAtHrhR64UhHQBA9cKPXCj1Hv/Qo9cKPXCmHcSFHQBauFHrhR65HwAEzMzMzMzNHv/1HrhR64UiHcSJHQBPrhR64UexHwAseuFHrhR9Hv/h64UeuFHuHcSNHQBmFHrhR64VHwAAUeuFHrhRHwAjhR64UeuGHcSRHQBrMzMzMzM1Hv/2ZmZmZmZpHv+R64UeuFHuHcSVHQBnrhR64UexHwANHrhR64UhHP+TMzMzMzM2HcSZHQB2ZmZmZmZpHv/tcKPXCj1xHP/nrhR64UeyHcSdHQB3rhR64UexHv9R64UeuFHtHP/Sj1wo9cKSHcShHQBvhR64UeuFHv/vXCj1wo9dHQAjhR64UeuGHcSlHQB5cKPXCj1xHwAbMzMzMzM1HQA4UeuFHrhSHcSpHQB24UeuFHrhHv9wo9cKPXClHQA2uFHrhR66HcStHQB7hR64UeuFHP91wo9cKPXFHQAPCj1wo9cOHcSxHQBt64UeuFHtHP/nCj1wo9cNHQANHrhR64UiHcS1HQB1R64UeuFJHQAczMzMzMzNHQAMKPXCj1wqHcS5HQBl64UeuFHtHQA5R64UeuFJHQAKPXCj1wo+HcS9HQBThR64UeuFHQAg9cKPXCj1HQAKj1wo9cKSHcTBHQA7hR64UeuFHQAuFHrhR64VHQAJR64UeuFKHcTFHQAtwo9cKPXFHQBJ64UeuFHtHQAHrhR64UeyHcTJHQAfCj1wo9cNHQAMzMzMzMzNHQAJ64UeuFHuHcTNHQArMzMzMzM1HP/Fwo9cKPXFHQALhR64UeuGHcTRHQANHrhR64UhHP8hR64UeuFJHQAL1wo9cKPaHcTVHQBJ64UeuFHtHP+XCj1wo9cNHQAMzMzMzMzOHcTZHQBXrhR64UexHP/szMzMzMzNHQAJmZmZmZmaHcTdHQBquFHrhR65HwAseuFHrhR9HP+OFHrhR64WHcThHQBYUeuFHrhRHwAIo9cKPXClHP+zMzMzMzM2HcTlHQCCPXCj1wo9HwAFcKPXCj1xHP/gAAAAAAACHcTpHQBf1wo9cKPZHv/3rhR64UexHQAoo9cKPXCmHcTtHQBrXCj1wo9dHv6mZmZmZmZpHQBEo9cKPXCmHcTxHQCCFHrhR64VHv+LhR64UeuFHQBEKPXCj1wqHcT1HQCFMzMzMzM1HP+qPXCj1wo9HQAPCj1wo9cOHcT5HQCCZmZmZmZpHQAkKPXCj1wpHQAMeuFHrhR+HcT9HP//XCj1wo9dHQAThR64UeuFHQAI9cKPXCj2HcUBHQAThR64UeuFHv+YUeuFHrhRHQANHrhR64UiHcUFHP/uFHrhR64VHP+OFHrhR64VHQAK4UeuFHriHcUJHQB1cKPXCj1xHwAmZmZmZmZpHQBUo9cKPXCmHcUNHQB8AAAAAAABHwACj1wo9cKRHQBh64UeuFHuHcURHQB/MzMzMzM1HwBIeuFHrhR9HQBYKPXCj1wqHcUVHQBcAAAAAAABHwAqj1wo9cKRHQBWPXCj1wo+HcUZHQBTCj1wo9cNHwBEeuFHrhR9HQBko9cKPXCmHcUdHQA3XCj1wo9dHwA9wo9cKPXFHQBoKPXCj1wqHcUhHQAzhR64UeuFHwAR64UeuFHtHQBuuFHrhR66HcUlHQAZmZmZmZmZHwBBcKPXCj1xHQBUUeuFHrhSHcUpHP/go9cKPXClHwBH1wo9cKPZHQBa4UeuFHriHcUtHQAYAAAAAAABHwAVwo9cKPXFHQBK4UeuFHriHcUxHQAXCj1wo9cNHv/3rhR64UexHQBgUeuFHrhSHcU1HQAnCj1wo9cNHv964UeuFHrhHQBfCj1wo9cOHcU5HQAI9cKPXCj1HP+Cj1wo9cKRHQBcKPXCj1wqHcU9HP/FHrhR64UhHP9FHrhR64UhHQBauFHrhR66HcVBHQAWuFHrhR65HP/0euFHrhR9HQBa4UeuFHriHcVFHQBAo9cKPXClHQAD1wo9cKPZHQBceuFHrhR+HcVJHQBGZmZmZmZpHQAszMzMzMzNHQBbMzMzMzM2HcVNHQBQUeuFHrhRHP/D1wo9cKPZHQBfXCj1wo9eHcVRHQBJHrhR64UhHv8cKPXCj1wpHQBgo9cKPXCmHcVVHQBbCj1wo9cNHwBD1wo9cKPZHQByZmZmZmZqHcVZHQBUUeuFHrhRHwBTCj1wo9cNHQBeFHrhR64WHcVdHQAtcKPXCj1xHwBIzMzMzMzNHQBz1wo9cKPaHcVhHQAh64UeuFHtHwBMo9cKPXClHQBJwo9cKPXGHcVlHQAx64UeuFHtHwAPCj1wo9cNHQBCFHrhR64WHcVpHP/7hR64UeuFHwARR64UeuFJHQBCFHrhR64WHcVtHP/x64UeuFHtHv/zMzMzMzM1HQBlmZmZmZmaHcVxHQBThR64UeuFHQA6j1wo9cKRHQBb1wo9cKPaHcV1HQA7MzMzMzM1HQA9cKPXCj1xHQBZmZmZmZmaHcV5HQBf1wo9cKPZHP/Qo9cKPXClHQBgo9cKPXCmHcV9HQBThR64UeuFHv+1wo9cKPXFHQBiuFHrhR66HcWBHP+8KPXCj1wpHwBf1wo9cKPZHQBZmZmZmZmaHcWFHv9zMzMzMzM1HwBgKPXCj1wpHQBeZmZmZmZqHcWJHP/czMzMzMzNHwBoeuFHrhR9HQBFHrhR64UiHcWNHP/wAAAAAAABHwBrrhR64UexHQBso9cKPXCmHcWRHP/JmZmZmZmZHwBtHrhR64UhHQCAo9cKPXCmHcWVHQAHCj1wo9cNHwB0KPXCj1wpHQCIZmZmZmZqHcWZHQAuuFHrhR65HwBqPXCj1wo9HQCFwo9cKPXGHcWdHP/+uFHrhR65HwBuj1wo9cKRHQCUUeuFHrhSHcWhHP/VHrhR64UhHwCAAAAAAAABHQCZhR64UeuGHcWlHQAqj1wo9cKRHwBqZmZmZmZpHQCZHrhR64UiHcWpHQBEKPXCj1wpHwBnXCj1wo9dHQCPMzMzMzM2HcWtHQBNR64UeuFJHwBSPXCj1wo9HQCOuFHrhR66HcWxHQBi4UeuFHrhHwBOZmZmZmZpHQCOeuFHrhR+HcW1HQBnhR64UeuFHwAz1wo9cKPZHQCOAAAAAAACHcW5HQBTrhR64UexHwAgUeuFHrhRHQCOFHrhR64WHcW9HQBOj1wo9cKRHv/nrhR64UexHQCNwo9cKPXGHcXBHQBbhR64UeuFHv+UeuFHrhR9HQCNXCj1wo9eHcXFHQAx64UeuFHtHv/XrhR64UexHQCN64UeuFHuHcXJHQAT1wo9cKPZHwALhR64UeuFHQCOUeuFHrhSHcXNHP/XrhR64UexHv//XCj1wo9dHQCOZmZmZmZqHcXRHQAczMzMzMzNHwA1HrhR64UhHQCOo9cKPXCmHcXVHQBDXCj1wo9dHwA8zMzMzMzNHQCN1wo9cKPaHcXZHP9mZmZmZmZpHwB3hR64UeuFHQCAUeuFHrhSHcXdHP+lHrhR64UhHwBeuFHrhR65HQCCo9cKPXCmHcXhHQAIUeuFHrhRHwCCFHrhR64VHQCHcKPXCj1yHcXlHP/YUeuFHrhRHwBh64UeuFHtHQCVmZmZmZmaHcXpHQAp64UeuFHtHwBdcKPXCj1xHQCdwo9cKPXGHcXtHQAz1wo9cKPZHwB3MzMzMzM1HQCdhR64UeuGHcXxHQBQo9cKPXClHwBxR64UeuFJHQCPMzMzMzM2HcX1HQBtwo9cKPXFHwBZ64UeuFHtHQCOj1wo9cKSHcX5HQAoUeuFHrhRHv9rhR64UeuFHQCNrhR64UeyHcX9HP+a4UeuFHrhHwAThR64UeuFHQCOuFHrhR66HcYBHP/Y9cKPXCj1Hv/LhR64UeuFHQCOKPXCj1wqHcYFHP+zMzMzMzM1HwB/XCj1wo9dHQClwo9cKPXGHcYJHQACPXCj1wo9HwB8AAAAAAABHQCsZmZmZmZqHcYNHP6mZmZmZmZpHwCJMzMzMzM1HQCnhR64UeuGHcYRHv4R64UeuFHtHwBqPXCj1wo9HQCmj1wo9cKSHcYVHv/HCj1wo9cNHwBqFHrhR64VHQCtwo9cKPXGHcYZHv/ij1wo9cKRHwBTCj1wo9cNHQCvhR64UeuGHcYdHv9o9cKPXCj1HwBGj1wo9cKRHQCyzMzMzMzOHcYhHwAEeuFHrhR9HwBHhR64UeuFHQClmZmZmZmaHcYlHwAkKPXCj1wpHwAxmZmZmZmZHQCo4UeuFHriHcYpHv+4UeuFHrhRHwA3Cj1wo9cNHQCg4UeuFHriHcYtHv9Cj1wo9cKRHwApR64UeuFJHQCrmZmZmZmaHcYxHP/MKPXCj1wpHwAg9cKPXCj1HQCq9cKPXCj2HcY1HP/lwo9cKPXFHv/tcKPXCj1xHQCphR64UeuGHcY5HP+ij1wo9cKRHv+mZmZmZmZpHQCozMzMzMzOHcY9HQAdwo9cKPXFHv/cKPXCj1wpHQCo4UeuFHriHcZBHQA7MzMzMzM1HwAOFHrhR64VHQCprhR64UeyHcZFHQBSPXCj1wo9HwADhR64UeuFHQCpCj1wo9cOHcZJHQAtwo9cKPXFHwA6PXCj1wo9HQCrHrhR64UiHcZNHQAEKPXCj1wpHwBAzMzMzMzNHQCrwo9cKPXGHcZRHv+qPXCj1wo9HwBwzMzMzMzNHQC0o9cKPXCmHcZVHv/3Cj1wo9cNHwByj1wo9cKRHQCqeuFHrhR+HcZZHwAHXCj1wo9dHwBT1wo9cKPZHQC1XCj1wo9eHcZdHwAT1wo9cKPZHwBQo9cKPXClHQCgUeuFHrhSHcZhHv9cKPXCj1wpHwBFHrhR64UhHQCceuFHrhR+HcZlHv/OuFHrhR65HwAeFHrhR64VHQCceuFHrhR+HcZpHv+Vwo9cKPXFHwAOFHrhR64VHQCuPXCj1wo+HcZtHQBe4UeuFHrhHwAThR64UeuFHQCpXCj1wo9eHcZxHQBVHrhR64UhHv/YUeuFHrhRHQCoPXCj1wo+HcZ1HQBBcKPXCj1xHwBI9cKPXCj1HQCrwo9cKPXGHcZ5HP/z1wo9cKPZHwBPrhR64UexHQCszMzMzMzOHcZ9HQB1cKPXCj1xHQAmZmZmZmZpHQDEAAAAAAACHcaBHQB8AAAAAAABHQACj1wo9cKRHQDArhR64UeyHcaFHQB/MzMzMzM1HQBIeuFHrhR9HQDDHrhR64UiHcaJHQBcAAAAAAABHQAqj1wo9cKRHQDDmZmZmZmaHcaNHQBTCj1wo9cNHQBEeuFHrhR9HQDAAAAAAAACHcaRHQA3XCj1wo9dHQA9wo9cKPXFHQC+PXCj1wo+HcaVHQAzhR64UeuFHQAR64UeuFHtHQC69cKPXCj2HcaZHQAZmZmZmZmZHQBBcKPXCj1xHQDEFHrhR64WHcadHP/go9cKPXClHQBH1wo9cKPZHQDCcKPXCj1yHcahHQAYAAAAAAABHQAVwo9cKPXFHQDGcKPXCj1yHcalHQAXCj1wo9cNHP/3rhR64UexHQDBFHrhR64WHcapHQAnCj1wo9cNHP964UeuFHrhHQDBZmZmZmZqHcatHQAI9cKPXCj1Hv+Cj1wo9cKRHQDCHrhR64UiHcaxHP/FHrhR64UhHv9FHrhR64UhHQDCeuFHrhR+Hca1HQAWuFHrhR65Hv/0euFHrhR9HQDCcKPXCj1yHca5HQBAo9cKPXClHwAD1wo9cKPZHQDCCj1wo9cOHca9HQBGZmZmZmZpHwAszMzMzMzNHQDCXCj1wo9eHcbBHQBQUeuFHrhRHv/D1wo9cKPZHQDBUeuFHrhSHcbFHQBJHrhR64UhHP8cKPXCj1wpHQDBAAAAAAACHcbJHQBbCj1wo9cNHQBD1wo9cKPZHQC5HrhR64UiHcbNHQBUUeuFHrhRHQBTCj1wo9cNHQDBo9cKPXCmHcbRHQAtcKPXCj1xHQBIzMzMzMzNHQC4ZmZmZmZqHcbVHQAh64UeuFHtHQBMo9cKPXClHQDGuFHrhR66HcbZHQAx64UeuFHtHQAPCj1wo9cNHQDIo9cKPXCmHcbdHP/7hR64UeuFHQARR64UeuFJHQDIo9cKPXCmHcbhHP/x64UeuFHtHP/zMzMzMzM1HQC/hR64UeuGHcblHQBThR64UeuFHwA6j1wo9cKRHQDCMzMzMzM2HcbpHQA7MzMzMzM1HwA9cKPXCj1xHQDCwo9cKPXGHcbtHQBf1wo9cKPZHv/Qo9cKPXClHQDBAAAAAAACHcbxHQBThR64UeuFHP+1wo9cKPXFHQDAeuFHrhR+Hcb1HP+8KPXCj1wpHQBf1wo9cKPZHQDCwo9cKPXGHcb5Hv9zMzMzMzM1HQBgKPXCj1wpHQDBj1wo9cKSHcb9HP/czMzMzMzNHQBoeuFHrhR9HQDH4UeuFHriHccBHP/wAAAAAAABHQBrrhR64UexHQC8AAAAAAACHccFHP/JmZmZmZmZHQBtHrhR64UhHQCxrhR64UeyHccJHQAHCj1wo9cNHQB0KPXCj1wpHQCp64UeuFHuHccNHQAuuFHrhR65HQBqPXCj1wo9HQCsj1wo9cKSHccRHP/+uFHrhR65HQBuj1wo9cKRHQCeAAAAAAACHccVHP/VHrhR64UhHQCAAAAAAAABHQCYzMzMzMzOHccZHQAqj1wo9cKRHQBqZmZmZmZpHQCZMzMzMzM2HccdHQBEKPXCj1wpHQBnXCj1wo9dHQCjHrhR64UiHcchHQBNR64UeuFJHQBSPXCj1wo9HQCjmZmZmZmaHcclHQBi4UeuFHrhHQBOZmZmZmZpHQCj1wo9cKPaHccpHQBnhR64UeuFHQAz1wo9cKPZHQCkUeuFHrhSHcctHQBTrhR64UexHQAgUeuFHrhRHQCkPXCj1wo+HccxHQBOj1wo9cKRHP/nrhR64UexHQCkj1wo9cKSHcc1HQBbhR64UeuFHP+UeuFHrhR9HQCk9cKPXCj2Hcc5HQAx64UeuFHtHP/XrhR64UexHQCkZmZmZmZqHcc9HQAT1wo9cKPZHQALhR64UeuFHQCkAAAAAAACHcdBHP/XrhR64UexHP//XCj1wo9dHQCj64UeuFHuHcdFHQAczMzMzMzNHQA1HrhR64UhHQCjrhR64UeyHcdJHQBDXCj1wo9dHQA8zMzMzMzNHQCkeuFHrhR+HcdNHP9mZmZmZmZpHQB3hR64UeuFHQCyAAAAAAACHcdRHP+lHrhR64UhHQBeuFHrhR65HQCvrhR64UeyHcdVHQAIUeuFHrhRHQCCFHrhR64VHQCq4UeuFHriHcdZHP/YUeuFHrhRHQBh64UeuFHtHQCcuFHrhR66HcddHQAp64UeuFHtHQBdcKPXCj1xHQCUj1wo9cKSHcdhHQAz1wo9cKPZHQB3MzMzMzM1HQCUzMzMzMzOHcdlHQBQo9cKPXClHQBxR64UeuFJHQCjHrhR64UiHcdpHQBtwo9cKPXFHQBZ64UeuFHtHQCjwo9cKPXGHcdtHQAoUeuFHrhRHP9rhR64UeuFHQCko9cKPXCmHcdxHP+a4UeuFHrhHQAThR64UeuFHQCjmZmZmZmaHcd1HP/Y9cKPXCj1HP/LhR64UeuFHQCkKPXCj1wqHcd5HP+zMzMzMzM1HQB/XCj1wo9dHQCMj1wo9cKSHcd9HQACPXCj1wo9HQB8AAAAAAABHQCF64UeuFHuHceBHP6mZmZmZmZpHQCJMzMzMzM1HQCKzMzMzMzOHceFHv4R64UeuFHtHQBqPXCj1wo9HQCLwo9cKPXGHceJHv/HCj1wo9cNHQBqFHrhR64VHQCEj1wo9cKSHceNHv/ij1wo9cKRHQBTCj1wo9cNHQCCzMzMzMzOHceRHv9o9cKPXCj1HQBGj1wo9cKRHQB/Cj1wo9cOHceVHwAEeuFHrhR9HQBHhR64UeuFHQCMuFHrhR66HceZHwAkKPXCj1wpHQAxmZmZmZmZHQCJcKPXCj1yHcedHv+4UeuFHrhRHQA3Cj1wo9cNHQCRcKPXCj1yHcehHv9Cj1wo9cKRHQApR64UeuFJHQCGuFHrhR66HcelHP/MKPXCj1wpHQAg9cKPXCj1HQCHXCj1wo9eHcepHP/lwo9cKPXFHP/tcKPXCj1xHQCIzMzMzMzOHcetHP+ij1wo9cKRHP+mZmZmZmZpHQCJhR64UeuGHcexHQAdwo9cKPXFHP/cKPXCj1wpHQCJcKPXCj1yHce1HQA7MzMzMzM1HQAOFHrhR64VHQCIo9cKPXCmHce5HQBSPXCj1wo9HQADhR64UeuFHQCJR64UeuFKHce9HQAtwo9cKPXFHQA6PXCj1wo9HQCHMzMzMzM2HcfBHQAEKPXCj1wpHQBAzMzMzMzNHQCGj1wo9cKSHcfFHv+qPXCj1wo9HQBwzMzMzMzNHQB7XCj1wo9eHcfJHv/3Cj1wo9cNHQByj1wo9cKRHQCH1wo9cKPaHcfNHwAHXCj1wo9dHQBT1wo9cKPZHQB564UeuFHuHcfRHwAT1wo9cKPZHQBQo9cKPXClHQCSAAAAAAACHcfVHv9cKPXCj1wpHQBFHrhR64UhHQCV1wo9cKPaHcfZHv/OuFHrhR65HQAeFHrhR64VHQCV1wo9cKPaHcfdHv+Vwo9cKPXFHQAOFHrhR64VHQCEFHrhR64WHcfhHQBe4UeuFHrhHQAThR64UeuFHQCI9cKPXCj2HcflHQBVHrhR64UhHP/YUeuFHrhRHQCKFHrhR64WHcfpHQBBcKPXCj1xHQBI9cKPXCj1HQCGj1wo9cKSHcftHP/z1wo9cKPZHQBPrhR64UexHQCFhR64UeuGHcfxHwBLMzMzMzM1HQA64UeuFHrhHQCKFHrhR64WHcf1HwBW4UeuFHrhHQAT1wo9cKPZHQCHrhR64UeyHcf5HwBO4UeuFHrhHQBIUeuFHrhRHQCUUeuFHrhSHcf9HwBPMzMzMzM1HQBOFHrhR64VHQCAj1wo9cKSHcgABAABHwBVR64UeuFJHQBGj1wo9cKRHQBseuFHrhR+HcgEBAABHwBS4UeuFHrhHQBYzMzMzMzNHQBc9cKPXCj2HcgIBAABHwBAUeuFHrhRHQBlHrhR64UhHQBiPXCj1wo+HcgMBAABHwBP1wo9cKPZHQBSuFHrhR65HQBFHrhR64UiHcgQBAABHwBkKPXCj1wpHQBSZmZmZmZpHQA1cKPXCj1yHcgUBAABHwBBmZmZmZmZHQBjXCj1wo9dHQA3Cj1wo9cOHcgYBAABHwAuuFHrhR65HQBuuFHrhR65HQBPXCj1wo9eHcgcBAABHwABR64UeuFJHQBsAAAAAAABHQBQUeuFHrhSHcggBAABHv/JmZmZmZmZHQB8zMzMzMzNHQBQzMzMzMzOHcgkBAABHP7mZmZmZmZpHQB2j1wo9cKRHQBRwo9cKPXGHcgoBAABHP4R64UeuFHtHQBgo9cKPXClHQBRmZmZmZmaHcgsBAABHP/DMzMzMzM1HQBQ9cKPXCj1HQBSPXCj1wo+HcgwBAABHQAJR64UeuFJHQBUeuFHrhR9HQBTCj1wo9cOHcg0BAABHP+LhR64UeuFHQA4o9cKPXClHQBR64UeuFHuHcg4BAABHv+dcKPXCj1xHQAuZmZmZmZpHQBRHrhR64UiHcg8BAABHv/Cj1wo9cKRHQAFwo9cKPXFHQBQ9cKPXCj2HchABAABHv/uFHrhR64VHQBFcKPXCj1xHQBQeuFHrhR+HchEBAABHv/RR64UeuFJHQBZmZmZmZmZHQBSFHrhR64WHchIBAABHwBkUeuFHrhRHQBBR64UeuFJHQBtHrhR64UiHchMBAABHwBLrhR64UexHQA0zMzMzMzNHQBoeuFHrhR+HchQBAABHwBgUeuFHrhRHQBhcKPXCj1xHQBe4UeuFHriHchUBAABHwBJwo9cKPXFHQBEAAAAAAABHQBCj1wo9cKSHchYBAABHwAszMzMzMzNHQBco9cKPXClHQAkeuFHrhR+HchcBAABHwBKPXCj1wo9HQBtwo9cKPXFHQAlcKPXCj1yHchgBAABHwAzhR64UeuFHQB+j1wo9cKRHQBPXCj1wo9eHchkBAABHv/cKPXCj1wpHQCGAAAAAAABHQBQo9cKPXCmHchoBAABHP/RR64UeuFJHQAg9cKPXCj1HQBSZmZmZmZqHchsBAABHv/5mZmZmZmZHP/64UeuFHrhHQBQUeuFHrhSHchwBAABHv9UeuFHrhR9HP/yj1wo9cKRHQBRcKPXCj1yHch0BAABHwBnCj1wo9cNHQBMKPXCj1wpHQAEeuFHrhR+Hch4BAABHwBa4UeuFHrhHQBauFHrhR65HP/T1wo9cKPaHch8BAABHwB+ZmZmZmZpHQBJ64UeuFHtHP/64UeuFHriHciABAABHwBcKPXCj1wpHQAp64UeuFHtHQABR64UeuFKHciEBAABHwBkzMzMzMzNHQALMzMzMzM1HP/I9cKPXCj2HciIBAABHwBUUeuFHrhRHP/Qo9cKPXClHP+1wo9cKPXGHciMBAABHwBAUeuFHrhRHP/2ZmZmZmZpHP+BR64UeuFKHciQBAABHwBPCj1wo9cNHP9hR64UeuFJHQAFHrhR64UiHciUBAABHwBKPXCj1wo9Hv+4UeuFHrhRHP/wAAAAAAACHciYBAABHwA2FHrhR64VHP/Cj1wo9cKRHQAYAAAAAAACHcicBAABHwAfXCj1wo9dHP/a4UeuFHrhHP/aPXCj1wo+HcigBAABHwAA9cKPXCj1HQARmZmZmZmZHP/fXCj1wo9eHcikBAABHv+YUeuFHrhRHQAHXCj1wo9dHP/q4UeuFHriHcioBAABHv9PXCj1wo9dHP/EeuFHrhR9HP/wo9cKPXCmHcisBAABHP8wo9cKPXClHQAoUeuFHrhRHP/wAAAAAAACHciwBAABHv8hR64UeuFJHQBI9cKPXCj1HP/pmZmZmZmaHci0BAABHP+euFHrhR65HQBYKPXCj1wpHP/uuFHrhR66Hci4BAABHv/lwo9cKPXFHQBOFHrhR64VHP/eFHrhR64WHci8BAABHwAOFHrhR64VHQA71wo9cKPZHP/Y9cKPXCj2HcjABAABHwBoUeuFHrhRHQAZ64UeuFHtHP9HrhR64UeyHcjEBAABHwByFHrhR64VHP/+FHrhR64VHP/jMzMzMzM2HcjIBAABHwBaZmZmZmZpHP+YUeuFHrhRHP8hR64UeuFKHcjMBAABHwBa4UeuFHrhHP9AAAAAAAABHQAaPXCj1wo+HcjQBAABHwA9cKPXCj1xHP/2ZmZmZmZpHQApmZmZmZmaHcjUBAABHwAlHrhR64UhHP9mZmZmZmZpHQApmZmZmZmaHcjYBAABHwAOZmZmZmZpHP+R64UeuFHtHP/FHrhR64UiHcjcBAABHP+a4UeuFHrhHQBnCj1wo9cNHP/sKPXCj1wqHcjgBAABHP/eFHrhR64VHQBUzMzMzMzNHP/1HrhR64UiHcjkBAABHv/5mZmZmZmZHQBdHrhR64UhHP/Y9cKPXCj2HcjoBAABHwAtHrhR64UhHQBA9cKPXCj1HP/Qo9cKPXCmHcjsBAABHwBauFHrhR65HwAEzMzMzMzNHP/1HrhR64UiHcjwBAABHwBPrhR64UexHwAseuFHrhR9HP/h64UeuFHuHcj0BAABHwBmFHrhR64VHwAAUeuFHrhRHQAjhR64UeuGHcj4BAABHwBrMzMzMzM1Hv/2ZmZmZmZpHP+R64UeuFHuHcj8BAABHwBnrhR64UexHwANHrhR64UhHv+TMzMzMzM2HckABAABHwB2ZmZmZmZpHv/tcKPXCj1xHv/nrhR64UeyHckEBAABHwB3rhR64UexHv9R64UeuFHtHv/Sj1wo9cKSHckIBAABHwBvhR64UeuFHv/vXCj1wo9dHwAjhR64UeuGHckMBAABHwB5cKPXCj1xHwAbMzMzMzM1HwA4UeuFHrhSHckQBAABHwB24UeuFHrhHv9wo9cKPXClHwA2uFHrhR66HckUBAABHwB7hR64UeuFHP91wo9cKPXFHwAPCj1wo9cOHckYBAABHwBt64UeuFHtHP/nCj1wo9cNHwANHrhR64UiHckcBAABHwB1R64UeuFJHQAczMzMzMzNHwAMKPXCj1wqHckgBAABHwBl64UeuFHtHQA5R64UeuFJHwAKPXCj1wo+HckkBAABHwBThR64UeuFHQAg9cKPXCj1HwAKj1wo9cKSHckoBAABHwA7hR64UeuFHQAuFHrhR64VHwAJR64UeuFKHcksBAABHwAtwo9cKPXFHQBJ64UeuFHtHwAHrhR64UeyHckwBAABHwAfCj1wo9cNHQAMzMzMzMzNHwAJ64UeuFHuHck0BAABHwArMzMzMzM1HP/Fwo9cKPXFHwALhR64UeuGHck4BAABHwANHrhR64UhHP8hR64UeuFJHwAL1wo9cKPaHck8BAABHwBJ64UeuFHtHP+XCj1wo9cNHwAMzMzMzMzOHclABAABHwBXrhR64UexHP/szMzMzMzNHwAJmZmZmZmaHclEBAABHwBquFHrhR65HwAseuFHrhR9Hv+OFHrhR64WHclIBAABHwBYUeuFHrhRHwAIo9cKPXClHv+zMzMzMzM2HclMBAABHwCCPXCj1wo9HwAFcKPXCj1xHv/gAAAAAAACHclQBAABHwBf1wo9cKPZHv/3rhR64UexHwAoo9cKPXCmHclUBAABHwBrXCj1wo9dHv6mZmZmZmZpHwBEo9cKPXCmHclYBAABHwCCFHrhR64VHv+LhR64UeuFHwBEKPXCj1wqHclcBAABHwCFMzMzMzM1HP+qPXCj1wo9HwAPCj1wo9cOHclgBAABHwCCZmZmZmZpHQAkKPXCj1wpHwAMeuFHrhR+HclkBAABHv//XCj1wo9dHQAThR64UeuFHwAI9cKPXCj2HcloBAABHwAThR64UeuFHv+YUeuFHrhRHwANHrhR64UiHclsBAABHv/uFHrhR64VHP+OFHrhR64VHwAK4UeuFHriHclwBAABlVQZhY3RpdmVyXQEAAEsAdXMu'))
	surfInfo = {'category': (0, None, {}), 'probeRadius': (0, None, {}), 'pointSize': (0, None, {}), 'name': [], 'density': (0, None, {}), 'colorMode': (0, None, {}), 'useLighting': (0, None, {}), 'transparencyBlendMode': (0, None, {}), 'molecule': [], 'smoothLines': (0, None, {}), 'lineWidth': (0, None, {}), 'allComponents': (0, None, {}), 'twoSidedLighting': (0, None, {}), 'customVisibility': [], 'drawMode': (0, None, {}), 'display': (0, None, {}), 'customColors': []}
	vrmlInfo = {'subid': (0, None, {}), 'display': (0, None, {}), 'id': (0, None, {}), 'vrmlString': [], 'name': (0, None, {})}
	colors = {'Ru': ((0.141176, 0.560784, 0.560784), 1, u'default'), 'Re': ((0.14902, 0.490196, 0.670588), 1, u'default'), 'Rf': ((0.8, 0, 0.34902), 1, u'default'), 'Ra': ((0, 0.490196, 0), 1, u'default'), 'Rb': ((0.439216, 0.180392, 0.690196), 1, u'default'), 'Rn': ((0.258824, 0.509804, 0.588235), 1, u'default'), 'Rh': ((0.0392157, 0.490196, 0.54902), 1, u'default'), 'Be': ((0.760784, 1, 0), 1, u'default'), 'Ba': ((0, 0.788235, 0), 1, u'default'), 'Bh': ((0.878431, 0, 0.219608), 1, u'default'), 'Bi': ((0.619608, 0.309804, 0.709804), 1, u'default'), 'Bk': ((0.541176, 0.309804, 0.890196), 1, u'default'), 'Br': ((0.65098, 0.160784, 0.160784), 1, u'default'), 'H': ((1, 1, 1), 1, u'default'), 'P': ((1, 0.501961, 0), 1, u'default'), 'Os': ((0.14902, 0.4, 0.588235), 1, u'default'), 'Ge': ((0.4, 0.560784, 0.560784), 1, u'default'), 'Gd': ((0.270588, 1, 0.780392), 1, u'default'), 'Ga': ((0.760784, 0.560784, 0.560784), 1, u'default'), 'Pr': ((0.85098, 1, 0.780392), 1, u'default'), 'Pt': ((0.815686, 0.815686, 0.878431), 1, u'default'), 'Pu': ((0, 0.419608, 1), 1, u'default'),
'C': ((0.564706, 0.564706, 0.564706), 1, u'default'), 'Pb': ((0.341176, 0.34902, 0.380392), 1, u'default'), 'Pa': ((0, 0.631373, 1), 1, u'default'), 'Pd': ((0, 0.411765, 0.521569), 1, u'default'), 'Cd': ((1, 0.85098, 0.560784), 1, u'default'), 'Po': ((0.670588, 0.360784, 0), 1, u'default'), 'Pm': ((0.639216, 1, 0.780392), 1, u'default'), 'Hs': ((0.901961, 0, 0.180392), 1, u'default'), 'Ho': ((0, 1, 0.611765), 1, u'default'), 'Hf': ((0.301961, 0.760784, 1), 1, u'default'), 'Hg': ((0.721569, 0.721569, 0.815686), 1, u'default'), 'He': ((0.85098, 1, 1), 1, u'default'), 'Md': ((0.701961, 0.0509804, 0.65098), 1, u'default'), 'Mg': ((0.541176, 1, 0), 1, u'default'), 'K': ((0.560784, 0.25098, 0.831373), 1, u'default'), 'Mn': ((0.611765, 0.478431, 0.780392), 1, u'default'), 'O': ((1, 0.0509804, 0.0509804), 1, u'default'), 'Mt': ((0.921569, 0, 0.14902), 1, u'default'), 'S': ((1, 1, 0.188235), 1, u'default'), 'W': ((0.129412, 0.580392, 0.839216), 1, u'default'), 'Zn': ((0.490196, 0.501961, 0.690196), 1, u'default'), 'Eu': ((0.380392, 1, 0.780392), 1, u'default'),
'Zr': ((0.580392, 0.878431, 0.878431), 1, u'default'), 'Er': ((0, 0.901961, 0.458824), 1, u'default'), 'Ni': ((0.313725, 0.815686, 0.313725), 1, u'default'), 'No': ((0.741176, 0.0509804, 0.529412), 1, u'default'), 'Na': ((0.670588, 0.360784, 0.94902), 1, u'default'), 'Nb': ((0.45098, 0.760784, 0.788235), 1, u'default'), 'Nd': ((0.780392, 1, 0.780392), 1, u'default'), 'Ne': ((0.701961, 0.890196, 0.960784), 1, u'default'), 'Np': ((0, 0.501961, 1), 1, u'default'), 'Fr': ((0.258824, 0, 0.4), 1, u'default'), 'Fe': ((0.878431, 0.4, 0.2), 1, u'default'), 'Fm': ((0.701961, 0.121569, 0.729412), 1, u'default'), 'B': ((1, 0.709804, 0.709804), 1, u'default'), 'F': ((0.564706, 0.878431, 0.313725), 1, u'default'), 'Sr': ((0, 1, 0), 1, u'default'), 'N': ((0.188235, 0.313725, 0.972549), 1, u'default'), 'Kr': ((0.360784, 0.721569, 0.819608), 1, u'default'), 'Si': ((0.941176, 0.784314, 0.627451), 1, u'default'), 'Sn': ((0.4, 0.501961, 0.501961), 1, u'default'), 'Sm': ((0.560784, 1, 0.780392), 1, u'default'), 'V': ((0.65098, 0.65098, 0.670588), 1, u'default'), 'Sc': ((0.901961, 0.901961, 0.901961), 1, u'default'),
'Sb': ((0.619608, 0.388235, 0.709804), 1, u'default'), 'Li': ((0.8, 0.501961, 1), 1, u'default'), 'Sg': ((0.85098, 0, 0.270588), 1, u'default'), 'Se': ((1, 0.631373, 0), 1, u'default'), 'Co': ((0.941176, 0.564706, 0.627451), 1, u'default'), 'Cm': ((0.470588, 0.360784, 0.890196), 1, u'default'), 'Cl': ((0.121569, 0.941176, 0.121569), 1, u'default'), 'Ca': ((0.239216, 1, 0), 1, u'default'), 'Cf': ((0.631373, 0.211765, 0.831373), 1, u'default'), 'Ce': ((1, 1, 0.780392), 1, u'default'), 'Xe': ((0.258824, 0.619608, 0.690196), 1, u'default'), 'Tm': ((0, 0.831373, 0.321569), 1, u'default'), 'Cs': ((0.341176, 0.0901961, 0.560784), 1, u'default'), 'Cr': ((0.541176, 0.6, 0.780392), 1, u'default'), 'Cu': ((0.784314, 0.501961, 0.2), 1, u'default'), 'La': ((0.439216, 0.831373, 1), 1, u'default'), 'light sea green': ((0.12549, 0.698039, 0.666667), 1, u'default'), 'Tl': ((0.65098, 0.329412, 0.301961), 1, u'default'), 'Lu': ((0, 0.670588, 0.141176), 1, u'default'), 'Lr': ((0.780392, 0, 0.4), 1, u'default'), 'Th': ((0, 0.729412, 1), 1, u'default'), 'Ti': ((0.74902, 0.760784, 0.780392), 1, u'default'),
'tan': ((0.823529, 0.705882, 0.54902), 1, u'default'), 'Te': ((0.831373, 0.478431, 0), 1, u'default'), 'Tb': ((0.188235, 1, 0.780392), 1, u'default'), 'Tc': ((0.231373, 0.619608, 0.619608), 1, u'default'), 'Ta': ((0.301961, 0.65098, 1), 1, u'default'), 'Yb': ((0, 0.74902, 0.219608), 1, u'default'), 'Db': ((0.819608, 0, 0.309804), 1, u'default'), 'Dy': ((0.121569, 1, 0.780392), 1, u'default'), 'At': ((0.458824, 0.309804, 0.270588), 1, u'default'), 'I': ((0.580392, 0, 0.580392), 1, u'default'), 'U': ((0, 0.560784, 1), 1, u'default'), 'Y': ((0.580392, 1, 1), 1, u'default'), 'Ac': ((0.439216, 0.670588, 0.980392), 1, u'default'), 'Ag': ((0.752941, 0.752941, 0.752941), 1, u'default'), 'Ir': ((0.0901961, 0.329412, 0.529412), 1, u'default'), 'Am': ((0.329412, 0.360784, 0.94902), 1, u'default'), 'Al': ((0.74902, 0.65098, 0.65098), 1, u'default'), 'As': ((0.741176, 0.501961, 0.890196), 1, u'default'), 'Ar': ((0.501961, 0.819608, 0.890196), 1, u'default'), 'Au': ((1, 0.819608, 0.137255), 1, u'default'), 'Es': ((0.701961, 0.121569, 0.831373), 1, u'default'), 'In': ((0.65098, 0.458824, 0.45098), 1, u'default'),
'Mo': ((0.329412, 0.709804, 0.709804), 1, u'default')}
	materials = {u'default': ((5, 5, 5), 100)}
	pbInfo = {'category': [u'distance monitor'], 'bondInfo': [{'color': (0, None, {}), 'atoms': [], 'label': (0, None, {}), 'halfbond': (0, None, {}), 'labelColor': (0, None, {}), 'labelOffset': (0, None, {}), 'drawMode': (0, None, {}), 'display': (0, None, {})}], 'lineType': (1, 2, {}), 'color': (1, 3, {}), 'optional': {'fixedLabels': (True, False, (1, False, {}))}, 'display': (1, True, {}), 'showStubBonds': (1, False, {}), 'lineWidth': (1, 1, {}), 'stickScale': (1, 1, {}), 'id': [-2]}
	modelAssociations = {}
	colorInfo = (6, (u'green', (0, 1, 0, 1)), {(u'light sea green', (0.12549, 0.698039, 0.666667, 1)): [2], (u'tan', (0.823529, 0.705882, 0.54902, 1)): [0], (u'yellow', (1, 1, 0, 1)): [3], (u'white', (1, 1, 1, 1)): [4], (u'red', (1, 0, 0, 1)): [1]})
	viewerInfo = {'cameraAttrs': {'center': (0, 0, 7.0393885723761), 'fieldOfView': 14.863598387282, 'nearFar': (24.689647082327, -10.610869937575), 'ortho': False, 'eyeSeparation': 50.8, 'focal': 7.0299999761581}, 'viewerAttrs': {'silhouetteColor': None, 'clipping': False, 'showSilhouette': True, 'showShadows': False, 'viewSize': 14.930847367865, 'labelsOnTop': True, 'depthCueRange': (0.5, 1), 'silhouetteWidth': 2, 'singleLayerTransparency': True, 'shadowTextureSize': 2048, 'backgroundImage': [None, 1, 2, 1, 0, 0], 'backgroundGradient': [('Chimera default', [(1, 1, 1, 1), (0, 0, 1, 1)], 1), 1, 0, 0], 'depthCue': False, 'highlight': 0, 'scaleFactor': 0.70412415471649, 'angleDependentTransparency': True, 'backgroundMethod': 0}, 'viewerHL': 5, 'cameraMode': 'mono', 'detail': 5, 'viewerFog': None, 'viewerBG': 4}

	replyobj.status("Initializing session restore...", blankAfter=0,
		secondary=True)
	from SimpleSession.versions.v65 import expandSummary
	init(dict(enumerate(expandSummary(colorInfo))))
	replyobj.status("Restoring colors...", blankAfter=0,
		secondary=True)
	restoreColors(colors, materials)
	replyobj.status("Restoring molecules...", blankAfter=0,
		secondary=True)
	restoreMolecules(molInfo, resInfo, atomInfo, bondInfo, crdInfo)
	replyobj.status("Restoring surfaces...", blankAfter=0,
		secondary=True)
	restoreSurfaces(surfInfo)
	replyobj.status("Restoring VRML models...", blankAfter=0,
		secondary=True)
	restoreVRML(vrmlInfo)
	replyobj.status("Restoring pseudobond groups...", blankAfter=0,
		secondary=True)
	restorePseudoBondGroups(pbInfo)
	replyobj.status("Restoring model associations...", blankAfter=0,
		secondary=True)
	restoreModelAssociations(modelAssociations)
	replyobj.status("Restoring camera...", blankAfter=0,
		secondary=True)
	restoreViewer(viewerInfo)

try:
	restoreCoreModels()
except:
	reportRestoreError("Error restoring core models")

	replyobj.status("Restoring extension info...", blankAfter=0,
		secondary=True)


try:
	import StructMeasure
	from StructMeasure.DistMonitor import restoreDistances
	registerAfterModelsCB(restoreDistances, 1)
except:
	reportRestoreError("Error restoring distances in session")


def restoreMidasBase():
	formattedPositions = {}
	import Midas
	Midas.restoreMidasBase(formattedPositions)
try:
	restoreMidasBase()
except:
	reportRestoreError('Error restoring Midas base state')


def restoreMidasText():
	from Midas import midas_text
	midas_text.aliases = {}
	midas_text.userSurfCategories = {}

try:
	restoreMidasText()
except:
	reportRestoreError('Error restoring Midas text state')


def restore_cap_attributes():
 cap_attributes = \
  {
   'cap_attributes': [ ],
   'cap_color': None,
   'cap_offset': 0.01,
   'class': 'Caps_State',
   'default_cap_offset': 0.01,
   'mesh_style': False,
   'shown': True,
   'subdivision_factor': 1.0,
   'version': 1,
  }
 import SurfaceCap.session
 SurfaceCap.session.restore_cap_attributes(cap_attributes)
registerAfterModelsCB(restore_cap_attributes)


def restore_volume_data():
 volume_data_state = \
  {
   'class': 'Volume_Manager_State',
   'data_and_regions_state': [ ],
   'version': 2,
  }
 from VolumeViewer import session
 session.restore_volume_data_state(volume_data_state)

try:
  restore_volume_data()
except:
  reportRestoreError('Error restoring volume data')

geomData = {'AxisManager': {}, 'CentroidManager': {}, 'PlaneManager': {}}

try:
	from StructMeasure.Geometry import geomManager
	geomManager._restoreSession(geomData)
except:
	reportRestoreError("Error restoring geometry objects in session")


def restoreSession_RibbonStyleEditor():
	import SimpleSession
	import RibbonStyleEditor
	userScalings = []
	userXSections = []
	userResidueClasses = []
	residueData = [(1, 'Chimera default', 'rounded', u'nucleic acid'), (2, 'Chimera default', 'rounded', u'nucleic acid'), (3, 'Chimera default', 'rounded', u'nucleic acid'), (4, 'Chimera default', 'rounded', u'nucleic acid'), (5, 'Chimera default', 'rounded', u'nucleic acid'), (6, 'Chimera default', 'rounded', u'nucleic acid'), (7, 'Chimera default', 'rounded', u'nucleic acid'), (8, 'Chimera default', 'rounded', u'nucleic acid'), (9, 'Chimera default', 'rounded', u'nucleic acid'), (10, 'Chimera default', 'rounded', u'nucleic acid'), (11, 'Chimera default', 'rounded', u'nucleic acid')]
	flags = RibbonStyleEditor.NucleicDefault1
	SimpleSession.registerAfterModelsCB(RibbonStyleEditor.restoreState,
				(userScalings, userXSections,
				userResidueClasses, residueData, flags))
try:
	restoreSession_RibbonStyleEditor()
except:
	reportRestoreError("Error restoring RibbonStyleEditor state")

trPickle = 'gAJjQW5pbWF0ZS5UcmFuc2l0aW9ucwpUcmFuc2l0aW9ucwpxASmBcQJ9cQMoVQxjdXN0b21fc2NlbmVxBGNBbmltYXRlLlRyYW5zaXRpb24KVHJhbnNpdGlvbgpxBSmBcQZ9cQcoVQZmcmFtZXNxCEsBVQ1kaXNjcmV0ZUZyYW1lcQlLAVUKcHJvcGVydGllc3EKXXELVQNhbGxxDGFVBG5hbWVxDWgEVQRtb2RlcQ5VBmxpbmVhcnEPdWJVCGtleWZyYW1lcRBoBSmBcRF9cRIoaAhLFGgJSwFoCl1xE2gMYWgNaBBoDmgPdWJVBXNjZW5lcRRoBSmBcRV9cRYoaAhLAWgJSwFoCl1xF2gMYWgNaBRoDmgPdWJ1Yi4='
scPickle = 'gAJjQW5pbWF0ZS5TY2VuZXMKU2NlbmVzCnEBKYFxAn1xA1UHbWFwX2lkc3EEfXNiLg=='
kfPickle = 'gAJjQW5pbWF0ZS5LZXlmcmFtZXMKS2V5ZnJhbWVzCnEBKYFxAn1xA1UHZW50cmllc3EEXXEFc2Iu'
def restoreAnimation():
	'A method to unpickle and restore animation objects'
	# Scenes must be unpickled after restoring transitions, because each
	# scene links to a 'scene' transition. Likewise, keyframes must be 
	# unpickled after restoring scenes, because each keyframe links to a scene.
	# The unpickle process is left to the restore* functions, it's 
	# important that it doesn't happen prior to calling those functions.
	import SimpleSession
	from Animate.Session import restoreTransitions
	from Animate.Session import restoreScenes
	from Animate.Session import restoreKeyframes
	SimpleSession.registerAfterModelsCB(restoreTransitions, trPickle)
	SimpleSession.registerAfterModelsCB(restoreScenes, scPickle)
	SimpleSession.registerAfterModelsCB(restoreKeyframes, kfPickle)
try:
	restoreAnimation()
except:
	reportRestoreError('Error in Animate.Session')

def restoreLightController():
	import Lighting
	Lighting._setFromParams({'ratio': 1.25, 'brightness': 1.16, 'material': [100.0, (1.0, 1.0, 1.0), 5], 'back': [(0.35740674433659325, 0.6604015517481454, -0.6604015517481455), (1.0, 1.0, 1.0), 0.0], 'mode': 'two-point', 'key': [(-0.35740674433659325, 0.6604015517481454, 0.6604015517481455), (1.0, 1.0, 1.0), 1.0], 'contrast': 0.83, 'fill': [(0.25056280708573153, 0.25056280708573153, 0.9351131265310293), (1.0, 1.0, 1.0), 0.0]})
try:
	restoreLightController()
except:
	reportRestoreError("Error restoring lighting parameters")


def restoreNucleotides():
	import NucleicAcids as NA
	NA.restoreState({0: {'residues': {1: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 2: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 3: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 4: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 5: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 6: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 7: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 8: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 9: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 10: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}, 11: {'slab params': {'style': 'long', 'showGly': True, 'orient': True}, 'side': 'fill/slab'}}}}, {})
try:
	restoreNucleotides()
except:
	reportRestoreError('Error restoring Nucleotides')

def restoreRemainder():
	from SimpleSession.versions.v65 import restoreWindowSize, \
	     restoreOpenStates, restoreSelections, restoreFontInfo, \
	     restoreOpenModelsAttrs, restoreModelClip, restoreSilhouettes

	curSelIds =  [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 99, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 19, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 125, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 79, 63, 57, 42, 44, 61, 29, 73, 25, 32, 30, 64, 59, 45, 31, 33, 34, 35, 36, 37, 38, 39, 40, 56, 41, 62, 43, 58, 54, 46, 53, 47, 60, 48, 55, 49, 50, 51, 52, 65, 66, 67, 68, 128, 69, 70, 71, 72, 121, 13, 26, 74, 75, 76, 77, 78, 12, 80, 81, 82, 84, 14, 85, 28, 86, 88, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 27, 113, 98, 15, 103, 100, 101, 102, 105, 104, 106, 107, 108, 109, 110, 111, 114, 112, 23, 115, 116, 117, 118, 119, 120, 139, 16, 122, 123, 124, 21, 126, 17, 127, 129, 131, 130, 149, 132, 133, 18, 134, 135, 136, 137, 138, 22, 140, 141, 142, 143, 161, 144, 145, 83, 146, 147, 148, 164, 150, 24, 163, 151, 152, 153, 154, 155, 156, 20, 157, 158, 159, 160, 165, 162, 570, 672, 673, 674, 675, 575, 677, 671, 577, 679, 680, 418, 538, 681, 581, 571, 683, 583, 584, 686, 687, 688, 588, 572, 589, 590,
692, 540, 693, 593, 573, 594, 595, 697, 698, 699, 700, 701, 574, 702, 703, 704, 542, 705, 706, 676, 707, 708, 709, 710, 711, 712, 405, 713, 576, 714, 715, 716, 544, 717, 718, 678, 719, 720, 721, 722, 478, 723, 623, 725, 578, 625, 626, 627, 546, 628, 406, 629, 579, 630, 631, 632, 633, 634, 635, 636, 580, 637, 638, 639, 420, 548, 640, 641, 682, 642, 643, 644, 645, 646, 647, 648, 582, 649, 650, 651, 449, 652, 407, 653, 684, 654, 655, 656, 657, 479, 658, 450, 660, 685, 661, 662, 663, 421, 451, 664, 665, 585, 666, 667, 668, 493, 669, 670, 452, 586, 453, 587, 480, 454, 689, 455, 408, 690, 494, 456, 691, 422, 457, 591, 458, 592, 436, 459, 621, 694, 481, 460, 695, 423, 461, 696, 495, 462, 596, 463, 597, 396, 482, 464, 598, 465, 599, 496, 466, 600, 467, 601, 357, 358, 359, 360, 361, 468, 362, 363, 364, 365, 366, 367, 603, 368, 369, 370, 371, 483, 372, 373, 604, 374, 375, 477, 377, 378, 605, 379, 380, 381, 382, 383, 384, 470, 385, 606, 386, 387, 388, 490, 491, 607, 492, 392, 393, 394, 395, 484, 497, 397, 469, 608, 499, 500, 400, 401, 503, 609, 504, 505, 506, 507, 614, 508, 509, 510, 610, 410, 411, 513, 413, 398, 414, 409, 399, 416, 518, 519, 419, 521, 471, 522, 612, 523, 524, 440, 424, 425, 511, 426, 613, 427, 428, 429, 430, 431, 485, 432, 534, 412, 434, 536, 537, 437, 438, 615, 439, 541, 441, 543, 443, 545, 472, 445, 616, 446, 447, 549, 550, 551, 415, 552, 553, 554, 555, 556, 486, 557, 558, 618, 559, 617, 560, 659, 561, 562, 563, 619, 564, 565, 566, 567, 568, 569, 620, 520, 514, 473, 622, 442, 724, 498, 624, 726, 501, 474, 525, 517, 547, 487, 526, 402, 515, 488, 527, 528, 389, 502, 529, 539, 530, 403, 516, 475, 531, 444, 611, 512, 417, 532, 448, 376, 489, 533, 433, 602, 390, 391, 476, 535,
435, 404]
	savedSels = []
	openModelsAttrs = { 'cofrMethod': 4 }
	windowSize = (1301, 687)
	xformMap = {0: (((0.23285227322876, 0.79783070263347, -0.55609890198379), 153.73073087945), (-1.3446016975916, 6.0248763306874, 9.2198813668131), True)}
	fontInfo = {'face': ('Sans Serif', 'Normal', 16)}
	clipPlaneInfo = {}
	silhouettes = {0: True, 727: True}

	replyobj.status("Restoring window...", blankAfter=0,
		secondary=True)
	restoreWindowSize(windowSize)
	replyobj.status("Restoring open states...", blankAfter=0,
		secondary=True)
	restoreOpenStates(xformMap)
	replyobj.status("Restoring font info...", blankAfter=0,
		secondary=True)
	restoreFontInfo(fontInfo)
	replyobj.status("Restoring selections...", blankAfter=0,
		secondary=True)
	restoreSelections(curSelIds, savedSels)
	replyobj.status("Restoring openModel attributes...", blankAfter=0,
		secondary=True)
	restoreOpenModelsAttrs(openModelsAttrs)
	replyobj.status("Restoring model clipping...", blankAfter=0,
		secondary=True)
	restoreModelClip(clipPlaneInfo)
	replyobj.status("Restoring per-model silhouettes...", blankAfter=0,
		secondary=True)
	restoreSilhouettes(silhouettes)

	replyobj.status("Restoring remaining extension info...", blankAfter=0,
		secondary=True)
try:
	restoreRemainder()
except:
	reportRestoreError("Error restoring post-model state")
from SimpleSession.versions.v65 import makeAfterModelsCBs
makeAfterModelsCBs()

from SimpleSession.versions.v65 import endRestore
replyobj.status('Finishing restore...', blankAfter=0, secondary=True)
endRestore({})
replyobj.status('', secondary=True)
replyobj.status('Restore finished.')

